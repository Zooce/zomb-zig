// Macro - these are basic text-replacement structures.
//  EX:  theme = $name
//  EX:  settings = $white_foreground
$name = "Zooce Dark"
$white_foreground = {
    foreground = $colors.white
}

$colors = {
    black = #2b2b2b
    white = #f2f2f2
    red = #ff0000
}

// Variable Function
//  EX:  tokenColors = [
//           $scope_def(comment.line, $foreground($colors.red))
//       ]
$scope_def(scope, settings) = {
    scope = %scope
    settings = %settings
}
$foreground(value) = {
    foreground = %value
}

// Weird edge cases
$" ok = ." = 5
$" = {\""(" = ") = {
    scope = %" = "
}

// Key-Value Pairs
"$schema" = vscode://schemas/color-theme
name = "Zooce Dark"
type = Dark
colors = {
    "editor.foreground" = $colors.white, // single comma between values is optional
    "editor.background" = $colors.black,
}
tokenColors = [
    {
        scope = "punctuation.definition.arguments"
        settings = {
            foreground = $colors.white
        }
    }
    $scope_def("punctuation.definition.type" $foreground($colors.red))
    {
        scope = string
        settings = $foreground(#00ff00)
    }
    {
        scope = support
        settings = $foreground($colors.red)
    }
]

multi-line-string = \\hello my friends
                    \\ what's up with this crazy
                    \\file format?"

$one = Cool
$m1(one two) = { // macro with paramters
    hello = %one // use the value of the parameter
    goodbye = [ 42 // the answer
        %two ]
    dude = $m2($one) // $one is another macro expr, not our parameter
}
$m2(a) = %a
$"hi.dude" = this // macro without parameters
// Did you notice you can have comments?
cool = {
    ports = [ 800 900 ]
    this = $"hi.dude"
    "wh.at" = $m1( 0 $m1( a, b ) ).goodbye  // commas are optional, yay!
    // "thing" points to a multi-line string...cool I guess
    oh_yea = { thing = \\cool = {
                       \\    ports = [ 800 900 ]
                       \\    this = $"hi.dude"
                       \\    what = $m1( 0 $m1( a b ) ).goodbye
                       \\    oh_yea = { thing = "nope" }
                       \\}
                       \\$hi = this // hi there!
                       \\$m1(one two) = {
                       \\    hello = %one
                       \\    goodbye = %two
                       \\}
    }
}
